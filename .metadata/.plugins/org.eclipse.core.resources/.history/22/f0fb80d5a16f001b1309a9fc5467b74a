package com.eng.geco;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@CrossOrigin
public class ContractController {
	
	 @Autowired
	 NamedParameterJdbcOperations template;
	 
	 private static Map<String, String> queryConditions = Map.of("description_like",
	            " and lower( description ) like lower( '%'||:description_like||'%')", "brand_id",
	            " and :brand_id in (select json_array_elements(mandates) -> 'brand' ->> 'id'  ) ", "service",
	            " and :service in ( select json_array_elements_text(json_array_elements(mandates) -> 'services') )",
	            "network_id", " and upper(:network_id) in (select json_array_elements(structures) -> 'network' ->> 'id'  )",
	            "region_id", " and upper(:region_id) in (select json_array_elements(structures) -> 'region' ->> 'id'  )",
	            "zone_id", " and upper(:zone_id) in (select json_array_elements(structures) -> 'zone' ->> 'id'  )",
	            "dealership_id", " and dealership in (select dealership from geco.dealers_geco where id = :dealership_id)",
	            "dealership_group", " and id = :dealership_group", "vatcode", " and vatcode = :vatcode", "id",
	            " and id = :id");
	 
	 private static Map<String, String> ordering = Map.of("id", "id ", "status_id", "status ->> 'id' ", "description",
	            "description ");
	 
	 @GetMapping("/contracts")
    public List<Map<String, Object>> list(@RequestParam Map<String, String> parameters,
            @RequestParam(defaultValue = "0") Long offset, @RequestParam(defaultValue = "10") Long limit,
            @RequestParam(defaultValue = "id") String sort, @RequestParam(defaultValue = "asc") String direction,
            @RequestHeader Map<String, String> headers) {

        User user = User.user(headers);

        System.out.println("User logged : " + user.given_name + " " + user.family_name);

        String sql = "select COUNT(0) OVER (PARTITION BY null) as record_count , * from geco.contracts_geco where 1=1 "
                + queryConditions.entrySet().stream().filter(e -> parameters.containsKey(e.getKey()))
                        .map(e -> e.getValue()).collect(Collectors.joining(" "))
                + " order by " + Util.getOrderByString(sort, direction, ordering) + " limit " + limit + " offset " + offset;

        System.out.println("sql: " + sql);
        return template.queryForList(sql, parameters).stream().map(e -> normalize(e)).collect(Collectors.toList());
    }

}
